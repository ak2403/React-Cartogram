const renderMaps = (name, data, division, max_radius, min_radius, defaultcolor, scale) => {
    var element = d3.select(`.${name}`).node();
    var width = element.getBoundingClientRect().width;
    var height = 640;
    var padding = 3;

    //create a new svg element with the above dimensions
    let map = d3.select(`.${name}`)
        .append('svg')
        .attr('width', width)
        .attr('height', height);

    let tooltip = d3.select(`.${name}`)
        .append("div")
        .attr("class", "custom-tooltip")
        .style("position", "absolute")
        .style("z-index", "10")
        .style("visibility", "hidden");

    tooltip.append("div")
        .attr("id", "header");
    tooltip.append("div")
        .attr("id", "description");

    //create projection
    let b0 = [140.974896, -33.976732]//[144.070158, -37.305532]
    let b1 = [150.181651, -39.093524] //[145.443449, -38.570515]
    let division_range = (max_radius + min_radius) / division.length
    let division_obj = []
    let start_min = 0
    let color_range = ['green', 'yellow', 'orange', 'red']

    for (let i = 0; i < division.length; i++) {
        division_obj.push({
            min: start_min,
            max: start_min + division_range,
            color: division[i].color
        })
        start_min += division_range
    }

    //create projection
    var projection = d3.geo.mercator()
        .center([(b1[0] + b0[0]) / 2, (b1[1] + b0[1]) / 2])
        .scale(5000)
        .translate([width / 2, height / 2])
        .precision(0.1);


    //create svg path generator using the projection
    var path = d3.geo.path()
        .projection(projection);

    var radius = d3.scale.sqrt()
        // .domain([0, d3.max(valueById)])
        .domain([min_radius, max_radius])
        .range([0, 30]);

    var force = d3.layout.force()
        .charge(0)
        .gravity(0)
        .size([width, height]);

    let nodes = []
    let count = 0
    for (var i in data) {
        let d = data[i]

        var point = projection([d['Centroid Longitude'], d['Centroid Latitude']]),
            value = d['Total Cases'];

        count < 6 ? count += 1 : count = 0

        nodes.push({
            name: d.Centroid,
            x: point[0], y: point[1],
            x0: point[0], y0: point[1],
            r: radius(value),
            value: value,
            default_color: defaultcolor
        });
    }

    force
        .nodes(nodes)
        .on("tick", tick)
        .start();

    var node = map.selectAll("circle")
        .data(nodes)
        .enter().append("circle")
        .attr("r", function (d) {
            return d.r;
        })
        // .style("opacity", function (d) {
        //     return ((d.r / max_radius) * 100)
        // })
        .style("fill", function (d) {
            let colors = d.default_color

            division_obj.map(list => {
                if (d.value > list.min && d.value < list.max) {
                    colors = list.color
                }
            })
            return colors
        })
        .on("mouseover", function (d) {
            tooltip.select("#header").text(`Centroid: ${d.name}`)
            tooltip.select("#description").text(`Total Cases: ${d.value}`)
            return tooltip.style("visibility", "visible");
        })
        .on("mousemove", function () {
            return tooltip.style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX - 130) + "px");
        })
        .on("mouseout", function () {
            return tooltip.style("visibility", "hidden");
        });


    function tick(e) {
        node
            .each(gravity(e.alpha * .1))
            .each(collide(.5))
            .attr("cx", function (d) {
                return d.x;
            })
            .attr("cy", function (d) { return d.y; });
    }

    function gravity(k) {
        return function (d) {
            d.x += (d.x0 - d.x) * k;
            d.y += (d.y0 - d.y) * k;
        };
    }

    function collide(k) {
        var q = d3.geom.quadtree(nodes);
        return function (node) {
            var nr = node.r + padding,
                nx1 = node.x - nr,
                nx2 = node.x + nr,
                ny1 = node.y - nr,
                ny2 = node.y + nr;
            q.visit(function (quad, x1, y1, x2, y2) {
                if (quad.point && (quad.point !== node)) {
                    var x = node.x - quad.point.x,
                        y = node.y - quad.point.y,
                        l = x * x + y * y,
                        r = nr + quad.point.r;
                    if (l < r * r) {
                        l = ((l = Math.sqrt(l)) - r) / l * k;
                        node.x -= x *= l;
                        node.y -= y *= l;
                        quad.point.x += x;
                        quad.point.y += y;
                    }
                }
                return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
            });
        };
    }

}

export default renderMaps